import numpy as np
import scipy.fftpack


def fourier_spectrum_from_parameters(real_part, imag_part, low_freq, high_freq):
    """
    Transforms a list of real and imaginary parts to a Fourier spectrum, and returns as well the matching frequency points

    :param real_part:
    1D-list or 1D-numpy.array. Contains the real part of the Fourier spectrum.

    :param imag_part:
    1D-list or 1D-numpy.array. Contains the imaginary part of the Fourier spectrum.

    :param low_freq:
    float. Defines the lowest frequency of the Fourier transform

    :param high_freq:
    float. Defines the highest frequency of the Fourier transform

    :return: fourier_spectrum, frequencies
    tuple. Returns the complex values of the spectrum and corresponding frequencies.

    """

    if len(real_part) != len(imag_part):
        raise ValueError('Real and imaginary parts of the spectrum must be of same length.')

    if low_freq >= high_freq:
        raise ValueError('Lowest frequency must be lower than higher frequency for Fourier spectrum frequencies')

    fourier_spectrum = np.array(real_part) + 1.0j * np.array(imag_part)
    frequencies = np.linspace(low_freq, high_freq, len(real_part))

    return fourier_spectrum, frequencies


def time_series_from_fourier_spectrum(fourier_spectrum, frequencies, n_periods = 1):
    """
    Transform a Fourier spectrum to a time series.

    :param fourier_spectrum:
    1D-numpy.array, dtype = numpy.complex_. Contains the complex values of the spectrum for frequencies matching frequencies.

    :param frequencies:
    1D-numpy.array. Contains the frequencies of the Fourier spectrum.

    :param n_periods:
    int. number of periods that are returned as the time series. If not specified, n_periods = 1.

    :return: values, times
    tuple. Return the values and the times for the time series generated by the Fourier transform inversion

    """

    freq_sampling = (len(fourier_spectrum) - 1) / (np.max(frequencies) - np.min(frequencies))

    invert_fourier = scipy.fftpack.ifft(fourier_spectrum)
    values = abs(invert_fourier).tolist() * n_periods
    times = np.linspace(0, n_periods / freq_sampling, len(fourier_spectrum) * n_periods)

    return values, times
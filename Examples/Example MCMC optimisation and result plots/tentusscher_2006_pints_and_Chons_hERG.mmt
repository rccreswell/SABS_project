[[model]]
name: tentusscher-2006
author: Michael Clerx
desc: """
    Myokit implementation of the 2006 human ventricular myocyte model by
    ten Tusscher and Panfilov.
    
    References:
    
    [1] The CellML versions of the model (http://models.cellml.org)
    [2] Alternans and spiral breakup in a human ventricular tissue model,
        ten Tusscher, Panfilov (2006) AJPHeart
    [3] A model for human ventricular tissue,
        ten Tusscher, Noble, Noble, Panfilov (2003) AJPHeart
    
    Original CellML meta-data follows below
    ---------------------------------------------------------------------------

    Alternans and spiral breakup in a human ventricular tissue model
    
    Penny Noble
    Oxford University Cardiac Electrophysiology Group
    Model Status
    This is the M-CELL VARIANT of the model. This model was created by Penny
    Noble of Oxford University and is known to run in COR and PCEnv. A stimulus
    protocol has been added that allows the model to simulate multiple action
    potentials at 1Hz.
    
    Abstract:
    
    Ventricular fibrillation (VF) is one of the main causes of death in the
    Western world. According to one hypothesis, the chaotic excitation dynamics
    during VF are the result of dynamical instabilities in action potential
    duration (APD) the occurrence of which requires that the slope of the APD
    restitution curve exceeds 1. Other factors such as electrotonic coupling
    and cardiac memory also determine whether these instabilities can develop.
    In this paper we study the conditions for alternans and spiral breakup in
    human cardiac tissue. Therefore, we develop a new version of our human
    ventricular cell model, which is based on recent experimental measurements
    of human APD restitution and includes a more extensive description of
    intracellular calcium dynamics. We apply this model to study the conditions
    for electrical instability in single cells, for reentrant waves in a ring
    of cells, and for reentry in two-dimensional sheets of ventricular tissue.
    We show that an important determinant for the onset of instability is the
    recovery dynamics of the fast sodium current. Slower sodium current
    recovery leads to longer periods of spiral wave rotation and more gradual
    conduction velocity restitution, both of which suppress 
    restitution-mediated instability. As a result, maximum restitution slopes
    considerably exceeding 1 (up to 1.5) may be necessary for electrical
    instability to occur. Although slopes necessary for the onset of
    instabilities found in our study exceed 1, they are within the range of
    experimentally measured slopes. Therefore, we conclude that steep APD
    restitution-mediated instability is a potential mechanism for VF in the
    human heart.
    
    The original paper reference is cited below:
    Alternans and spiral breakup in a human ventricular tissue model,
    K.H.W.J. ten Tusscher, A.V. Panfilov,
    Sep 2006, American Journal of Physiology, Heart and Circulatory Physiology,
    291 3, H1088-1100.
    PubMed ID: 16565318
    """
# Initial values
membrane.V      = -8.53798558432631864e+01
calcium.Ca_i    =  1.05782268600543037e-04
calcium.Ca_sr   =  3.55567791655852350e+00
calcium.Ca_ss   =  2.14172873269809840e-04
calcium.R_prime =  9.89066126100902498e-01
sodium.Na_i     =  1.01338761744302950e+01
potassium.K_i   =  1.35368636336204105e+02
ikr.xr1         =  2.07650883539678194e-04
ikr.xr2         =  4.72733193318403078e-01
iks.xs          =  3.23090984071628057e-03
ina.m           =  1.66171456717857527e-03
ina.h           =  7.48991583078272738e-01
ina.j           =  7.48599753512242727e-01
ical.d          =  3.30548499869733964e-05
ical.f          =  9.77158843631106722e-01
ical.f2         =  9.99406290178190937e-01
ical.fCass      =  9.99972178434477055e-01
ito.s           =  9.99997904693742057e-01
ito.r           =  2.35709886030767176e-08

#
# External inputs
#
[engine]
pace = 0 bind pace
time = 0 bind time
    in [ms]    

#
# Cell type (endo. epi, mid)
#
[cell]
type = 1
    desc: The type of cell. Endo = 0, Epi = 1, Mid = 2

#
# Membrane potential
#
# Appendix to [3]
#
[membrane]
use stimulus.i_stim
dot(V) = -(i_ion + i_stim + i_diff)
    in [mV]
    label membrane_potential
i_ion = potassium.ItK + calcium.ItCa + sodium.ItNa
    label cellular_current
    in [A/F]
i_diff = 0
    bind diffusion_current
    in [A/F]

#
# Stimulus current
#
# Appendix to [3]
#
[stimulus]
i_stim = amplitude * engine.pace
    amplitude = -52 [A/F]
    
#
# Physical constants
#
# Appendix to [3]
#
[phys]
F =  96485.3415 [C/mmol]
R = 8314.472 [J/mol/K]
T = 310 [K]
RTF = R * T / F
FTR = F / (R * T)
FFTR = F * F / (R * T)
Cm = 0.185 [uF]
Vc = 0.016404 [um^3]

#
# Reversal potentials
#
# Appendix to [3]
#
[rev]
use phys.RTF
P_kna = 0.03
ECa = 0.5 * RTF * log(extra.Cao / calcium.Ca_i)
    in [mV]
EK = RTF * log(extra.Ko / potassium.K_i)
    in [mV]
EKs = RTF * log((extra.Ko + P_kna * extra.Nao) / (potassium.K_i + P_kna * sodium.Na_i))
    in [mV]
ENa = phys.RTF * log(extra.Nao / sodium.Na_i)
    in [mV]
    
#
# External concentrations
#
# Appendix to [3]
#
[extra]
Ko = 5.4 [mM]
Nao = 140.0 [mM]
Cao = 2 [mM]

#
# L-type calcium current
#
# Appendix to [2]
#
[ical]
use membrane.V
scale_tau_f = 1.0 
scale_cal = 1.0
conductance_cal_compound = 1.0
gCaL = conductance_cal_compound * scale_cal * 3.98e-5 [mS/uF]
ICaL = if(V == 15,
        p1 * (p2 - p4) / p3,
        p1 * (V - 15) * (p2 * exp(p3 * (V - 15)) - p4) / (exp(p3 * (V - 15)) - 1))
    p1 = gCaL * d * f * f2 * fCass * 4 * phys.FFTR
    p2 = 0.25 * calcium.Ca_ss
    p3 = 2 * phys.FTR
    p4 = extra.Cao
    in [A/F]
dot(d) = (inf - d) / tau
    alpha = 1.4 / (1 + exp((-35 - V) / 13)) + 0.25
    beta  = 1.4 / (1 + exp((V + 5) / 5))
    gamma = 1 / (1 + exp((50 - V) / 20))
    tau = alpha * beta + gamma
    inf = 1 / (1 + exp((-8 - V) / 7.5))
dot(f2) = (inf - f2) / tau
    inf = 0.67 / (1 + exp((V + 35) / 7)) + 0.33
    tau = 562 * exp(-(V + 27) ^ 2 / 240) + 31 / (1 + exp((25 - V) / 10)) + 80 / (1 + exp((V + 30) / 10))
dot(fCass) = (inf - fCass) / tau
    inf = 0.6 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 0.4
    tau = 80 / (1 + (calcium.Ca_ss / 0.05) ^ 2) + 2
dot(f) = (inf - f) / tau
    inf = 1 / (1 + exp((V + 20) / 7))
    tau = scale_tau_f*(1102.5 * exp(-(V + 27) ^ 2 / 225) + 200 / (1 + exp((13 - V) / 10)) + 180 / (1 + exp((V + 30) / 10)) + 20)

#
# Background Calcium current ICaB
#
# Appendix to [3]
#
[icab]
use membrane.V
scale_in = 1.0
g_bca = scale_in*0.000592 [mS/uF]
ICaB = g_bca * (V - rev.ECa)
    in [A/F]

#
# Calcium pump IpCa
#
# Appendix to [3]
#
[ipca]
use calcium.Ca_i
scale_out = 1.0
K_pCa = 0.0005 [mM]
g_pCa = scale_out*0.1238 [A/F]
IpCa = g_pCa * Ca_i / (Ca_i + K_pCa)
    in [A/F]

#
# Fast Sodium current INa
#
# Appendix to [3]
#
[ina]
use membrane.V
scale_in = 1.0
conductance_na_compound = 1.0
gNa = conductance_na_compound * scale_in * 14.838 [mS/uF]
INa = gNa * m ^ 3 * h * j * (V - rev.ENa)
    in [A/F]
dot(m) = (inf - m) / tau
    inf = 1 / (1 + exp((-56.86 - V) / 9.03)) ^ 2
    tau = alpha * beta
    alpha = 1 / (1 + exp((-60 - V) / 5))
    beta = 0.1 / (1 + exp((V + 35) / 5)) + 0.1 / (1 + exp((V - 50) / 200))
dot(h) = (inf - h) / tau
    inf = 1 / (1 + exp((V + 71.55) / 7.43)) ^ 2
    tau = 1 / (alpha + beta)
    alpha = if(V < -40, 0.057 * exp(-(V + 80) / 6.8), 0)
    beta = if(V < -40,
        2.7 * exp(0.079 * V) + 310000 * exp(0.3485 * V),
        0.77 / (0.13 * (1 + exp((V + 10.66) / -11.1))))
dot(j) = (inf - j) / tau
    inf = 1 / (1 + exp((V + 71.55) / 7.43)) ^ 2
    tau = 1 / (alpha + beta)
    alpha = if(V < -40,
        (-25428 * exp(0.2444 * V) - 6.948e-6 * exp(-0.04391 * V)) * (V + 37.78) / (1 + exp(0.311 * (V + 79.23))),
        0)
    beta = if(V < -40,
        0.02424 * exp(-0.01052 * V) / (1 + exp(-0.1378 * (V + 40.14))),
        0.6 * exp(0.057 * V) / (1 + exp(-0.1 * (V + 32))))


#
# Inward rectifier Potassium current IK1
#
# Appendix to [3]
#
[ik1]
use rev.EK
use membrane.V
scale_k1 = 1.0
gK1 = scale_k1 * 5.405 [mS/uF]
IK1 = gK1 * inf * sqrt(extra.Ko / 5.4) * (V - rev.EK)
    in [A/F]
inf = alpha / (alpha + beta)
    alpha = 0.1 / (1 + exp(0.06 * (V - EK - 200)))
    beta = (3.0 * exp(0.0002 * (V - EK + 100)) + exp(0.1 * (V - EK - 10))) / (1 + exp(-0.5 * (V - EK)))

#
# Potassium pump IpK
#
# Appendix to [3]
#
[ipk]
use membrane.V
scale_in = 1.0
gpK = scale_in*0.0146 [mS/uF]
IpK = gpK * (V - rev.EK) / (1 + exp((25 - V) / 5.98))
    in [A/F]

#
# Rapid time dependent Potassium current IKr
#
# Appendix to [3]
#
[ikr]
use membrane.V
use extra.Ko
scale_kr = 1.0
conductance_kr_compound = 1.0
gKr = conductance_kr_compound * scale_kr * 0.153 [mS/uF]
IKr = gKr * xr1 * xr2 * (V - rev.EK)
    in [A/F]
dot(xr1) = (inf - xr1) / tau
    k3 = 0.0873 * exp(0.00891 * V)
    k4 = 0.00515 * exp(-0.03158 * V)
    inf = k4 / (k3 + k4)
    tau = 1 / (k3 + k4)
dot(xr2) = (inf - xr2) / tau
    k1 = 0.000226 * exp(0.0699 * V)
    k2 = 0.0000345 * exp(-0.05462 * V)
    inf = k1 / (k1 + k2)
    tau = 1 / (k1 + k2)
    
#
# Slow time dependent Potassium current IKs
#
# Appendix to [2]
#
[iks]
use membrane.V
scale_out = 1.0
gKs = piecewise(cell.type == 2, 0.098, 0.392)
IKs = scale_out * gKs * xs * xs * (V - rev.EKs)
    in [A/F]
dot(xs) = (inf - xs) / tau
    alpha = 1400 / sqrt(1 + exp((5 - V) / 6))
    beta  = 1 / (1 + exp((V - 35) / 15))
    tau = 1 * alpha * beta + 80
    inf = 1 / (1 + exp((-5 - V) / 14))

#
# Background Sodium current INaB
#
# Appendix to [3]
#
[inab]
use membrane.V
scale_in = 1.0
gNaB = scale_in * 0.00029 [mS/uF]
INaB = gNaB * (V - rev.ENa)
    in [A/F]

#
# Sodium-Calcium exchanger INaCa
#
# Appendix to [3]
#
[inaca]
use phys.FTR
use membrane.V
use sodium.Na_i, extra.Nao
use calcium.Ca_i, extra.Cao
scale_in = 1.0
K_NaCa = 1000 in [A/F]
K_sat = 0.1
Km_Ca = 1.38 in [mM]
Km_Nai = 87.5 in [mM]
a = 2.5
g = 0.35
Nao3 = Nao * Nao * Nao
Nai3 = Na_i * Na_i * Na_i
INaCa = scale_in * K_NaCa * (exp(g * V * FTR) * Nai3 * Cao - exp((g - 1) * V * FTR) * Nao3 * Ca_i * a) / (
        (Km_Nai ^ 3 + Nao3) * (Km_Ca + Cao) * (1 + K_sat * exp((g - 1) * V * FTR)))
    in [A/F]

#
# Sodium-Potassium pump INaK
#
# Appendix to [3]
#
[inak]
use membrane.V
use extra.Ko
use sodium.Na_i
K_mNa = 40 [mM]
K_mk = 1 [mM]
P_NaK = 2.724 [A/F]
scale_out = 1.0
INaK = scale_out * P_NaK * Ko / (Ko + K_mk) * Na_i / (Na_i + K_mNa) / (
        1 + 0.1245 * exp(-0.1 * V * phys.FTR) + 0.0353 * exp(-V * phys.FTR))
    in [A/F]

#
# Transient outward current ITo
#
# Appendix to [2]
#
[ito]
use membrane.V
gTo = if(cell.type == 0, 0.073, 0.294)
    in [mS/uF]
scale_out = 1.0
ITo = scale_out * gTo * r * s * (V - rev.EK)
    in [A/F]
dot(r) = (inf - r) / tau
    inf = 1 / (1 + exp((20 - V) / 6))
    tau = 9.5 * exp(-(V + 40) ^ 2 / 1800) + 0.8
dot(s) = (inf - s) / tau
    inf = 1 / (1 + exp((V + dv) / 5))
        dv = if(cell.type == 0, 28, 20)
    tau = if(cell.type == 0,
        1000 * exp(-(V + 67) ^ 2 / 1000) + 8,
        85 * exp(-(V + 45) ^ 2 / 320) + 5 / (1 + exp((V - 20) / 5)) + 3)

#
# Sodium dynamics
#
# Appendix to [3]
#
[sodium]
ItNa = ina.INa + inab.INaB + 3 * inak.INaK + 3 * inaca.INaCa
dot(Na_i) = -ItNa / (phys.Vc * phys.F) * phys.Cm
    in [mM]

#
# Potassium Dynamics
#
# Appendix to [3]
#
[potassium]
use membrane.V
ItK = ik1.IK1 + ito.ITo + ikr.IKr + iks.IKs + ipk.IpK - 2 * inak.INaK
dot(K_i) = -(ItK + stimulus.i_stim) / (phys.Vc * phys.F) * phys.Cm
    in [mM]

#
# Calcium dynamics
#
# Appendix to [2]
#
[calcium]
use membrane.V
ItCa = icab.ICaB + ipca.IpCa + ical.ICaL - 2 * inaca.INaCa
    desc: Total Calcium current
V_sr = 0.001094 [um^3]
dot(Ca_i) = Ca_i_bufc * ((i_leak - i_up) * V_sr / phys.Vc + i_xfer - (ItCa - ical.ICaL) * phys.Cm / (2 * phys.Vc * phys.F))
    in [mM]
    Ca_i_bufc = 1 / (1 + Buf_c * K_buf_c / (Ca_i + K_buf_c) ^ 2)
    Buf_c = 0.2 [mM]
    K_buf_c = 0.001 [mM]
dot(Ca_ss) = Ca_ss_bufss * (-ical.ICaL * phys.Cm / (2 * V_ss * phys.F) + i_rel * V_sr / V_ss - i_xfer * phys.Vc / V_ss)
    in [mM]
    Ca_ss_bufss = 1 / (1 + Buf_ss * K_buf_ss / (Ca_ss + K_buf_ss) ^ 2)
    Buf_ss = 0.4 [mM]
    K_buf_ss = 0.00025 [mM]
    V_ss = 5.468e-5 [um^3]
dot(Ca_sr) = Ca_sr_bufsr * (i_up - (i_rel + i_leak))
    in [mM]
    Ca_sr_bufsr = 1 / (1 + Buf_sr * K_buf_sr / (Ca_sr + K_buf_sr) ^ 2)
    Buf_sr = 10 [mM]
    K_buf_sr = 0.3 [mM]
K_up = 0.00025 [mM]
kcasr = max_sr - (max_sr - min_sr) / (1 + (EC / Ca_sr) ^ 2)
EC = 1.5 [mM]
max_sr = 2.5
min_sr = 1
O = k1 * Ca_ss ^ 2 * R_prime / (k3 + k1 * Ca_ss ^ 2)
    k1 = k1_prime / kcasr
    k1_prime = 0.15
    k3 = 0.06 [mS/uF]
dot(R_prime) = -k2 * Ca_ss * R_prime + k4 * (1 - R_prime)
    k2 = k2_prime * kcasr
    k2_prime = 0.045
    k4 = 0.005 [mS/uF]
i_leak = V_leak * (Ca_sr - Ca_i)
    V_leak = 0.00036 [mS/uF]
i_rel = V_rel * O * (Ca_sr - Ca_ss)
    V_rel = 0.102 [mS/uF]
i_up = Vmax_up / (1 + K_up ^ 2 / Ca_i ^ 2)
    Vmax_up = 0.006375 [mol/m^3/ms]
i_xfer = V_xfer * (Ca_ss - Ca_i)
    V_xfer = 0.0038 [mS/uF]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1        50       0.5      1000     0

[[script]]
import myokit

# Get the model and protocol, create a simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run a simulation
d = s.run(1000)

# Display the simulated membrane potential using Matplotlib
import matplotlib.pyplot as pl
pl.figure()
pl.plot(d['engine.time'], d['membrane.V'])
pl.xlabel('Time [ms]')
pl.ylabel('Membrane potential [mV]')
pl.show()

